{"version":3,"sources":["Model/HiveWorld.js","Model/MinMaxAI.js","Components/HiveGame.js","App.js","serviceWorker.js","index.js"],"names":["HiveWorld","copyFrom","this","blackHand","whiteHand","board","turn","size","whiteQueenPos","blackQueenPos","Color","BLACK","WHITE","Map","color","isPosSurrounded","isGoalState","oppositeColor","countPiecesAround","pos","count","adjacent","forEach","findPieceAt","every","move","prev","delete","toString","getHand","piece","set","type","PieceType","QUEEN","updateQueenPosByMove","add","get","result","getAllPiecePositions","push","currColor","includedType","Set","has","placeMoves","undefined","getQueenInHand","filter","adj","Move","ANT","GRASSHOPPER","getPlaceMoves","pieceMoves","flatMap","getPieceMoves","excluding","equals","Array","from","keys","map","HexPos","fromString","find","Piece","getFirstOfEachPieceInHand","ORIGIN","adjPositions","nonAdjToOpponent","positions","potentialPos","adjPiece","moves","isPosFreeAndAdjToAnyPieceExcluding","top","topRight","botRight","bot","botLeft","topLeft","dirFunc","current","frontier","enteredFrontier","length","pop","potentialMove","to","fromAdjBlocked","toAdjBlocked","fromPos","some","toPos","connectedCount","otherMove","Object","is","q","r","other","s","split","Number","SPIDER","BEETLE","MinMaxHiveAI","hw","bestMoveData","minimaxAlphaBeta","NEGATIVE_INFINITY","POSITIVE_INFINITY","bestMove","console","log","value","doMove","depth","alpha","beta","maximizingPlayer","evaluateState","maxEval","getAllPossibleMoves","evalData","undoMove","Math","max","minEval","min","HiveGame","useState","hiveWorld","setHiveWorld","setPlaceMoves","setPieceMoves","blackAnts","setBlackAnts","whiteAnts","setWhiteAnts","blackHoppers","setBlackHoppers","whiteHoppers","setWhiteHoppers","blackQueen","setBlackQueen","whiteQueen","setWhiteQueen","winner","setWinner","handleMove","playMove","getValidPlaceMoves","pieceType","getValidPieceMoves","width","height","x","y","style","fill","onClick","fontSize","background","margin","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0wBAAqBA,EAAS,WAC7B,aAA8B,IAAlBC,EAAQ,uDAAG,KAAI,4hBACT,OAAbA,GACHC,KAAKC,UAAYF,EAASE,UAC1BD,KAAKE,UAAYH,EAASG,UAC1BF,KAAKG,MAAQJ,EAASI,MACtBH,KAAKI,KAAOL,EAASK,KACrBJ,KAAKK,KAAON,EAASM,KACrBL,KAAKM,cAAgBP,EAASO,cAC9BN,KAAKO,cAAgBR,EAASQ,gBAE9BP,KAAKC,UAAS,YAAGD,KAAI,MAAmBQ,EAAMC,OAC9CT,KAAKE,UAAS,YAAGF,KAAI,MAAmBQ,EAAME,OAC9CV,KAAKG,MAAQ,IAAIQ,IACjBX,KAAKI,KAAO,EACZJ,KAAKK,KAAO,EACZL,KAAKM,cAAgB,KACrBN,KAAKO,cAAgB,KAEvB,CAuZC,OAvZA,oCAED,WACC,OAAOP,KAAKI,KAAO,IAAM,EAAII,EAAMC,MAAQD,EAAME,KAClD,GAAC,yBAED,WACC,OAAOV,KAAKI,KAAO,IAAM,EAAII,EAAME,MAAQF,EAAMC,KAClD,GAAC,2BAED,SAAcG,GACb,OAAIA,IAAUJ,EAAME,MACZF,EAAMC,MACLG,IAAUJ,EAAMC,MACjBD,EAAME,WADT,CAEN,GAAC,yBAmBD,SAAYE,GACX,OAAIZ,KAAKO,eAAiBK,IAAUJ,EAAME,MAClCV,KAAKa,gBAAgBb,KAAKO,kBACzBP,KAAKM,eAAiBM,IAAUJ,EAAMC,QACvCT,KAAKa,gBAAgBb,KAAKM,cAEnC,GAAC,2BAED,SAAcM,GACb,OAAIZ,KAAKc,YAAYF,GACb,IAGJZ,KAAKc,YAAYd,KAAKe,cAAcH,KAC/B,IAIJA,IAAUJ,EAAMC,MACZT,KAAKgB,kBAAkBhB,KAAKM,eAAiBN,KAAKgB,kBAAkBhB,KAAKO,eACxEK,IAAUJ,EAAME,MACjBV,KAAKgB,kBAAkBhB,KAAKO,eAAiBP,KAAKgB,kBAAkBhB,KAAKM,oBAD5E,CAGP,GAAC,+BAED,SAAkBW,GAAM,IAAD,OACtB,GAAY,OAARA,EACH,OAAQ,EAET,IAAIC,EAAQ,EAOZ,OANAD,EAAIE,SAASC,SAAQ,SAAAH,GACN,EAAKI,YAAYJ,KAE9BC,GAAS,EAEX,IACOA,CACR,GAAC,6BAED,SAAgBD,GAAM,IAAD,OACpB,OAAOA,EAAIE,SAASG,OAAM,SAAAL,GAAG,OAAI,EAAKI,YAAYJ,EAAI,GACvD,GAAC,oBAED,SAAOM,GACFA,EAAKC,KACRxB,KAAKG,MAAMsB,OAAOF,EAAKC,KAAKE,aAE5B1B,KAAK2B,QAAQJ,EAAKK,MAAMhB,OAAOa,OAAOF,EAAKK,OAC3C5B,KAAKK,QAGNL,KAAKG,MAAM0B,IAAIN,EAAKN,IAAIS,WAAYH,EAAKK,OACrCL,EAAKK,MAAME,OAASC,EAAUC,OAChChC,KAAKiC,qBAAqBV,GAE5BvB,KAAKI,MACN,GAAC,sBAED,SAASmB,GAERvB,KAAKG,MAAMsB,OAAOF,EAAKN,IAAIS,YAEvBH,EAAKC,KAEPxB,KAAKG,MAAM0B,IAAIN,EAAKC,KAAKE,WAAYH,EAAKK,QAG1C5B,KAAK2B,QAAQJ,EAAKK,MAAMhB,OAAOsB,IAAIX,EAAKK,OACxC5B,KAAKK,QAIHkB,EAAKK,MAAME,OAASC,EAAUC,QAC5BT,EAAKK,MAAMhB,QAAUJ,EAAMC,MAChCT,KAAKO,cAAgBgB,EAAKC,KACdD,EAAKK,MAAMhB,QAAUJ,EAAME,QACvCV,KAAKM,cAAgBiB,EAAKC,OAI3BxB,KAAKI,MACJ,GAAC,kCAEH,SAAqBmB,GAChBA,EAAKK,MAAMhB,QAAUJ,EAAMC,MAC9BT,KAAKO,cAAgBgB,EAAKN,IAClBM,EAAKK,MAAMhB,QAAUJ,EAAME,QACnCV,KAAKM,cAAgBiB,EAAKN,IAC5B,GAEA,yBACA,SAAYA,GACX,OAAOjB,KAAKG,MAAMgC,IAAIlB,EAAIS,WAC3B,GAAC,uBAED,SAAUd,GAAQ,IAAD,OACZwB,EAAS,GAOb,OANApC,KAAKqC,uBAAuBjB,SAAQ,SAACH,GACpC,IAAMW,EAAQ,EAAKP,YAAYJ,GAC3BW,EAAMhB,QAAUA,GACnBwB,EAAOE,KAAKV,EAEd,IACOQ,CACR,GAAC,qBAED,WACC,OAAO,CACR,GAAC,qBAED,SAAQxB,GACP,OAAOA,IAAUJ,EAAME,MAAQV,KAAKE,UAAYF,KAAKC,SACtD,GAAC,4BAED,WAAkB,IAC+B,EADhC,cACID,KAAK2B,QAAQ3B,KAAKuC,YAAU,IAAhD,2BAAkD,CAAC,IAAxCX,EAAK,QACf,GAAIA,EAAME,OAASC,EAAUC,MAC5B,OAAOJ,CAET,CAAC,+BAEF,GAAC,uCAED,WACC,IAAIQ,EAAS,GACTI,EAAe,IAAIC,IAOvB,OANAzC,KAAK2B,QAAQ3B,KAAKuC,WAAWnB,SAAQ,SAACQ,GAChCY,EAAaE,IAAId,EAAME,QAC3BU,EAAaN,IAAIN,EAAME,MACvBM,EAAOE,KAAKV,GAEd,IACOQ,CACR,GAAC,2BA4DD,WACC,GAAkB,IAAdpC,KAAKI,KAAY,OAAO,YAAAJ,KAAI,QAC3B,GAAkB,IAAdA,KAAKI,KAAY,OAAO,YAAAJ,KAAI,QAErC,IAAM2C,EAAU,YAAG3C,KAAI,QACvB,GAAIA,KAAKI,MAAQ,QAEFwC,IADA5C,KAAK6C,iBAElB,OAAOF,EAAWG,QAAO,SAACvB,GAAI,OAAKA,EAAKK,MAAME,OAASC,EAAUC,KAAK,IAGxE,OAAOW,CACR,GAAC,2BAED,SAAc1B,GACb,IAAMW,EAAQ5B,KAAKqB,YAAYJ,GAE/B,GAAIW,EAAMhB,QAAUZ,KAAKuC,UAAW,MAAO,GAG3C,GAAIvC,KAAKI,MAAQ,QAEFwC,IADA5C,KAAK6C,iBAElB,MAAO,GAIT,IAC8B,EAD9B,cACkB5B,EAAIE,UAAQ,IAA9B,2BAAgC,CAAC,IAAtB4B,EAAG,QAEb,QAAiBH,IADA5C,KAAKqB,YAAY0B,KACH,YAAA/C,KAAI,MAA4B,IAAIgD,EAAKpB,EAAOmB,EAAK9B,IACnF,MAAO,EAET,CAAC,+BAED,OAAIW,EAAME,OAASC,EAAUC,MACrB,YAAAhC,KAAI,MAAgBiB,GACnBW,EAAME,OAASC,EAAUkB,IAC1B,YAAAjD,KAAI,MAAciB,GACjBW,EAAME,OAASC,EAAUmB,YAC1B,YAAAlD,KAAI,MAAsBiB,QAD7B,CAEN,GAAC,iCA8DD,WAAuB,IAAD,OACf0B,EAAa3C,KAAKmD,gBAKlBC,EAJiBpD,KAAKqC,uBAAuBS,QACnD,SAAC7B,GAAG,OAAK,EAAKI,YAAYJ,GAAKL,QAAU,EAAK2B,SAAS,IAGrBc,SAAQ,SAACpC,GAAG,OAAK,EAAKqC,cAAcrC,EAAI,IAG1E,MADc,sBAAO0B,GAAU,YAAKS,GAErC,GAAC,gDA0CD,SAAmCnC,EAAKsC,GACvC,GAAIvD,KAAKqB,YAAYJ,GAAM,OAAO,EAAM,IAEV,EAFU,cAEtBA,EAAIE,UAAQ,IAA9B,2BAAgC,CAAC,IAAtB4B,EAAG,QACb,GAAI/C,KAAKqB,YAAY0B,KAASA,EAAIS,OAAOD,GACxC,OAAO,CAEN,CAAC,+BAED,OAAO,CACX,GAAC,kCAED,WAEC,OAAOE,MAAMC,KAAK1D,KAAKG,MAAMwD,QAAQC,IAAIC,EAAOC,WACjD,GAEA,6BAEA,SAAgB7C,GACf,OAAOjB,KAAKmD,gBAAgBY,MAAK,SAACxC,GAAI,OAAKA,EAAKN,IAAIuC,OAAOvC,EAAI,GAChE,GAAC,gCAED,SAAmBA,GAClB,OAAOjB,KAAKmD,gBAAgBL,QAAO,SAAAvB,GAAI,OAAIA,EAAKK,MAAME,OAASC,EAAUkB,GAAG,IAAEc,MAAK,SAACxC,GAAI,OAAKA,EAAKN,IAAIuC,OAAOvC,EAAI,GAClH,KAAC,EA1a4B,GA0a5B,WArYiBL,GACjB,OAAO,IAAI6B,IAAI,CACd,IAAIuB,EAAMjC,EAAUC,MAAOpB,GAC3B,IAAIoD,EAAMjC,EAAUmB,YAAatC,GACjC,IAAIoD,EAAMjC,EAAUmB,YAAatC,GACjC,IAAIoD,EAAMjC,EAAUmB,YAAatC,GACjC,IAAIoD,EAAMjC,EAAUkB,IAAKrC,GACzB,IAAIoD,EAAMjC,EAAUkB,IAAKrC,GACzB,IAAIoD,EAAMjC,EAAUkB,IAAKrC,GACzB,IAAIoD,EAAMjC,EAAUkB,IAAKrC,GACzB,IAAIoD,EAAMjC,EAAUkB,IAAKrC,GACzB,IAAIoD,EAAMjC,EAAUkB,IAAKrC,GACzB,IAAIoD,EAAMjC,EAAUkB,IAAKrC,IAE3B,CAAC,aA0IA,OAAO,YAAIZ,KAAKiE,6BAA6BL,KAC5C,SAAChC,GAAK,OAAK,IAAIoB,EAAKpB,EAAOsC,EAAO,GAEpC,CAAC,aAMA,OAHgB,YAAGlE,KAAI,MACtBkE,EAAO/C,SAGT,CAAC,aAGA,IAAMgD,EAAY,YAAGnE,KAAI,QACnBoE,EAAgB,YACrBpE,KAAI,MAAkCmE,GAGvC,OAFgB,YACfnE,KAAI,MAA+CoE,EAErD,CAAC,aAGA,IAC6C,EADzCC,EAAY,GAAG,cACDrE,KAAKqC,wBAAsB,IAA7C,2BAA+C,CAAC,IACR,EAD7BpB,EAAG,sBACcA,EAAIE,UAAQ,IAAvC,2BAAyC,CAAC,IAA/BmD,EAAY,aACiB1B,IAAnC5C,KAAKqB,YAAYiD,IACpBD,EAAU/B,KAAKgC,EAEjB,CAAC,+BACF,CAAC,+BACD,OAAOD,CACR,CAAC,WAEgCpD,GAAM,IAAD,OAUrC,OATiBA,EAAI6B,QAAO,SAAC7B,GAAS,IACP,EADM,cAClBA,EAAIE,UAAQ,IAA9B,2BAAgC,CAAC,IAAtB4B,EAAG,QACPwB,EAAW,EAAKlD,YAAY0B,GAClC,QAAiBH,IAAb2B,GAA0BA,EAAS3D,QAAU,EAAK2B,UACrD,OAAO,CAET,CAAC,+BACD,OAAO,CACR,GAED,CAAC,WAE6C8B,GAC7C,IAAIG,EAAQ,GAMZ,OALAxE,KAAKiE,4BAA4B7C,SAAQ,SAACQ,GAAW,IACzB,EADwB,cACjCyC,GAAS,IAA3B,2BAA6B,CAAC,IAAnBpD,EAAG,QACbuD,EAAMlC,KAAK,IAAIU,EAAKpB,EAAOX,GAC5B,CAAC,+BACF,IACOuD,CACR,CAAC,WA8CcvD,GAAM,IAAD,OACnB,OAAOA,EAAIE,SAAS2B,QAAO,SAAAC,GAAG,OAC5B,EAAK0B,mCAAmC1B,EAAK9B,IAAI,YAClD,EAAI,MAAkBA,EAAK8B,EAAI,IAC7Ba,KAAI,SAAAb,GAAG,OAAI,IAAIC,EAAK,EAAK3B,YAAYJ,GAAM8B,EAAK9B,EAAI,GACxD,CAAC,WAEoBA,GACpB,IAAIuD,EAAQ,GAaZ,OAZIxE,KAAKqB,YAAYJ,EAAIyD,MACxBF,EAAMlC,KAAK,YAAAtC,KAAI,MAAuBiB,GAAK,SAACA,GAAG,OAAKA,EAAIyD,GAAG,KACxD1E,KAAKqB,YAAYJ,EAAI0D,WACxBH,EAAMlC,KAAK,YAAAtC,KAAI,MAAuBiB,GAAK,SAACA,GAAG,OAAKA,EAAI0D,QAAQ,KAC7D3E,KAAKqB,YAAYJ,EAAI2D,WACxBJ,EAAMlC,KAAK,YAAAtC,KAAI,MAAuBiB,GAAK,SAACA,GAAG,OAAKA,EAAI2D,QAAQ,KAC7D5E,KAAKqB,YAAYJ,EAAI4D,MACxBL,EAAMlC,KAAK,YAAAtC,KAAI,MAAuBiB,GAAK,SAACA,GAAG,OAAKA,EAAI4D,GAAG,KACxD7E,KAAKqB,YAAYJ,EAAI6D,UACxBN,EAAMlC,KAAK,YAAAtC,KAAI,MAAuBiB,GAAK,SAACA,GAAG,OAAKA,EAAI6D,OAAO,KAC5D9E,KAAKqB,YAAYJ,EAAI8D,UACxBP,EAAMlC,KAAK,YAAAtC,KAAI,MAAuBiB,GAAK,SAACA,GAAG,OAAKA,EAAI8D,OAAO,KACzDP,CACR,CAAC,WAEqBvD,EAAK+D,GAE1B,IADA,IAAIC,EAAUD,EAAQ/D,GACfjB,KAAKqB,YAAY4D,IACvBA,EAAUD,EAAQC,GAEnB,OAAO,IAAIjC,EAAKhD,KAAKqB,YAAYJ,GAAMgE,EAAShE,EACjD,CAAC,WAEYA,GACZ,IAAMuD,EAAQ,GACRU,EAAW,CAACjE,GACZkE,EAAkB,IAAI1C,IAG5B,IAFA0C,EAAgBjD,IAAIjB,EAAIS,YAEjBwD,EAASE,OAAS,GAAG,CAC3B,IAAMH,EAAUC,EAASG,MACnBC,EAAgB,IAAItC,EAAKhD,KAAKqB,YAAYJ,GAAMgE,EAAShE,GAE1DgE,EAAQzB,OAAOvC,IACnBuD,EAAMlC,KAAKgD,GAAe,IAEO,EAFP,cAETL,EAAQ9D,UAAQ,IAAlC,2BAAoC,CAAC,IAA1B4B,EAAG,QAEZ/C,KAAKyE,mCAAmC1B,EAAK9B,KAC5CkE,EAAgBzC,IAAIK,EAAIrB,aAAW,YACpC1B,KAAI,MAAkBiF,EAASlC,KAE/BmC,EAAS5C,KAAKS,GACdoC,EAAgBjD,IAAIa,EAAIrB,YAE1B,CAAC,+BACF,CAEA,OAAO8C,CACR,CAAC,WAgBgBd,EAAM6B,GAAK,IAAD,OACpBC,EAAiB9B,EAAKvC,SAAS2B,QAAO,SAAA7B,GAAG,OAAI,EAAKI,YAAYJ,EAAI,IAClEwE,EAAeF,EAAGpE,SAAS2B,QAAO,SAAA7B,GAAG,OAAI,EAAKI,YAAYJ,EAAI,IAGpE,QAFwBuE,EAAe1C,QAAO,SAAA4C,GAAO,OAAID,EAAaE,MAAK,SAAAC,GAAK,OAAIF,EAAQlC,OAAOoC,EAAM,GAAC,IAEtFR,QAAU,EAI/B,CAAC,WAE0B7D,GAE1BvB,KAAKG,MAAMsB,OAAOF,EAAKC,KAAKE,YAE5B,IAAM2C,EAAYrE,KAAKqC,uBACnB6C,EAAW,CAACb,EAAU,IACtBc,EAAkB,IAAI1C,IAC1B0C,EAAgBjD,IAAImC,EAAU,GAAG3C,YAGjC,IADA,IAAImE,EAAiB,EACdX,EAASE,OAAS,GAAG,CAC3B,IAAMH,EAAUC,EAASG,MACzBQ,GAAkB,EAAE,IAEc,EAFd,cAEFZ,EAAQ9D,UAAQ,IAAlC,2BAAoC,CAAC,IAA1B4B,EAAG,QACT/C,KAAKqB,YAAY0B,KAASoC,EAAgBzC,IAAIK,EAAIrB,cACrDwD,EAAS5C,KAAKS,GACdoC,EAAgBjD,IAAIa,EAAIrB,YAE1B,CAAC,+BACF,CAIA,OAFA1B,KAAKG,MAAM0B,IAAIN,EAAKC,KAAKE,WAAYH,EAAKK,OAEnCiE,IAAmB7F,KAAKK,KAAO,CACvC,CA8BM,IAAM2D,EAAK,aACjB,WAAYlC,EAAMlB,GAAQ,oBACzBZ,KAAK8B,KAAOA,EACZ9B,KAAKY,MAAQA,CACd,IAGYoC,EAAI,WAChB,WAAYpB,EAAOX,GAAiB,IAAZO,EAAK,UAAD,6CAAC,KAAI,oBAChCxB,KAAK4B,MAAQA,EACb5B,KAAKiB,IAAMA,EACXjB,KAAKwB,KAAOA,CACb,CAMC,OANA,mCAED,SAAOsE,GACN,OACCC,OAAOC,GAAGhG,KAAK4B,MAAOkE,EAAUlE,QAAU5B,KAAKiB,IAAIuC,OAAOsC,EAAU7E,IAEtE,KAAC,EAXe,GAcJ4C,EAAM,WAClB,WAAYoC,EAAGC,GAAI,oBAClBlG,KAAKiG,EAAIA,EACTjG,KAAKkG,EAAIA,CACV,CAKC,OALA,qCAOD,WACC,MAAM,GAAN,OAAUlG,KAAKiG,EAAC,YAAIjG,KAAKkG,EAC1B,GAAC,oBAED,SAAOC,GACN,OAAOnG,KAAKiG,IAAME,EAAMF,GAAKjG,KAAKkG,IAAMC,EAAMD,CAC/C,GAAC,oBAED,WACC,MAAO,CACNlG,KAAK+E,QACL/E,KAAK2E,SACL3E,KAAK0E,IACL1E,KAAK6E,IACL7E,KAAK8E,QACL9E,KAAK4E,SAEP,GAAC,eAED,WACC,OAAO,IAAIf,EAAO7D,KAAKiG,EAAGjG,KAAKkG,EAAI,EACpC,GAAC,eAED,WACC,OAAO,IAAIrC,EAAO7D,KAAKiG,EAAGjG,KAAKkG,EAAI,EACpC,GAAC,mBAED,WACC,OAAO,IAAIrC,EAAO7D,KAAKiG,EAAI,EAAGjG,KAAKkG,EACpC,GAAC,oBAED,WACC,OAAO,IAAIrC,EAAO7D,KAAKiG,EAAI,EAAGjG,KAAKkG,EACpC,GAAC,oBAED,WACC,OAAO,IAAIrC,EAAO7D,KAAKiG,EAAI,EAAGjG,KAAKkG,EAAI,EACxC,GAAC,mBAED,WACC,OAAO,IAAIrC,EAAO7D,KAAKiG,EAAI,EAAGjG,KAAKkG,EAAI,EACxC,IAAC,yBA9CD,SAAkBE,GACjB,MAAeA,EAAEC,MAAM,KAAKzC,IAAI0C,QAAO,mBACvC,OAAO,IAAIzC,EADH,KAAG,KAEZ,KAAC,EATiB,GAuDNK,EAAS,IAAIL,EAAO,EAAG,EAAG,GAE1BrD,EAAQ,CACpBC,MAAO,QACPC,MAAO,SAGKqB,EAAY,CACxBC,MAAO,QACPuE,OAAQ,SACRC,OAAQ,SACRtD,YAAa,cACbD,IAAK,OCngBOwD,EAAY,WACrB,WAAYC,GAAK,oBACb1G,KAAK0G,GAAKA,CACd,CA4DF,OA5DG,qCAED,WACI,IACMC,EAAe3G,KAAK4G,iBADZ,EACoCN,OAAOO,kBAAmBP,OAAOQ,kBAAmBtG,EAAME,OACtGqG,EAAWJ,EAAapF,KAC9ByF,QAAQC,IAAIN,EAAaO,OACzBlH,KAAK0G,GAAGS,OAAOJ,EACnB,GAAC,8BAED,SAAiBK,EAAOC,EAAOC,EAAMC,GACjC,IAAMb,EAAK1G,KAAK0G,GACtB,GAAc,IAAVU,GAAeV,EAAG5F,YAAYN,EAAMC,QAAUiG,EAAG5F,YAAYN,EAAME,OACrE,MAAO,CAAEa,KAAM,KAAM2F,MAAOR,EAAGc,cAAchH,EAAME,QAGrD,IAAIqG,EAAW,KAGf,GAAIQ,IAAqB/G,EAAME,MAAO,CACpC,IAEwB,EAFpB+G,EAAUnB,OAAOO,kBACfrC,EAAQkC,EAAGgB,sBAAsB,cACpBlD,GAAK,IAAxB,2BAA0B,CAAC,IAAhBjD,EAAI,QAChBmF,EAAGS,OAAO5F,GACV,IAAMoG,EAAW3H,KAAK4G,iBAAiBQ,EAAQ,EAAGC,EAAOC,EAAM9G,EAAMC,OASrE,GARAiG,EAAGkB,SAASrG,GAERoG,EAAST,MAAQO,IACnBA,EAAUE,EAAST,MACnBH,EAAWxF,GAIT+F,IADJD,EAAQQ,KAAKC,IAAIT,EAAOM,EAAST,QAE/B,KAED,CACM,+BACN,MAAO,CAAE3F,KAAMwF,EAAUG,MAAOO,EAClC,CAAO,GAAIF,IAAqB/G,EAAMC,MAAO,CAC3C,IAEwB,EAFpBsH,EAAUzB,OAAOQ,kBACftC,EAAQkC,EAAGgB,sBAAsB,cACpBlD,GAAK,IAAxB,2BAA0B,CAAC,IAAhBjD,EAAI,QAChBmF,EAAGS,OAAO5F,GACV,IAAMoG,EAAW3H,KAAK4G,iBAAiBQ,EAAQ,EAAGC,EAAOC,EAAM9G,EAAME,OASrE,GARAgG,EAAGkB,SAASrG,GAERoG,EAAST,MAAQa,IACnBA,EAAUJ,EAAST,MACnBH,EAAWxF,IAGb+F,EAAOO,KAAKG,IAAIV,EAAMK,EAAST,SACnBG,EACV,KAED,CAAC,+BAED,MAAO,CAAE9F,KAAMwF,EAAUG,MAAOa,EAClC,CACD,KAAC,EA/DuB,G,OCSV,SAASE,IACvB,MAAkCC,mBAAS,IAAIpI,GAAY,mBAApDqI,EAAS,KAAEC,EAAY,KAC9B,EAAoCF,mBAAS,IAAG,mBAAzCvF,EAAU,KAAE0F,EAAa,KAChC,EAAoCH,mBAAS,IAAG,mBAAzC9E,EAAU,KAAEkF,EAAa,KAChC,EAAkCJ,mBAAS,IAAG,mBAAvCK,EAAS,KAAEC,EAAY,KAC9B,EAAkCN,mBAAS,IAAG,mBAAvCO,EAAS,KAAEC,EAAY,KAC9B,EAAwCR,mBAAS,IAAG,mBAA7CS,EAAY,KAAEC,EAAe,KACpC,EAAwCV,mBAAS,IAAG,mBAA7CW,EAAY,KAAEC,EAAe,KACpC,EAAoCZ,qBAAU,mBAAvCa,EAAU,KAAEC,EAAa,KAChC,EAAoCd,qBAAU,mBAAvCe,EAAU,KAAEC,EAAa,KAChC,EAA4BhB,mBAAS,MAAK,mBAAnCiB,EAAM,KAAEC,EAAS,KAElBC,EAAa,SAAC9H,GAEnB4G,EAAUhB,OAAO5F,GACN,IAAIkF,EAAa0B,GACzBmB,WACHlB,EAAa,IAAItI,EAAUqI,IAC3BE,EAAc,IACdC,EAAc,IAEd,IAAIC,EAAY,GACZE,EAAY,GACZI,EAAe,GACfF,EAAe,GACnBR,EAAUhI,MAAMiB,SAAQ,SAACQ,EAAOX,GAC/BA,EAAM4C,EAAOC,WAAW7C,GACpBW,EAAME,OAASC,EAAUkB,KAAOrB,EAAMhB,QAAUJ,EAAMC,MACzD8H,EAAUjG,KAAK,CAAErB,IAAKA,EAAKW,MAAOA,IAC1BA,EAAME,OAASC,EAAUkB,KAAOrB,EAAMhB,QAAUJ,EAAME,MAC9D+H,EAAUnG,KAAK,CAAErB,IAAKA,EAAKW,MAAOA,IAC1BA,EAAME,OAASC,EAAUC,OAASJ,EAAMhB,QAAUJ,EAAME,MAChEwI,EAAc,CAAEjI,IAAKA,EAAKW,MAAOA,IACzBA,EAAME,OAASC,EAAUC,OAASJ,EAAMhB,QAAUJ,EAAMC,MAChEuI,EAAc,CAAE/H,IAAKA,EAAKW,MAAOA,IACzBA,EAAME,OAASC,EAAUmB,aAAetB,EAAMhB,QAAUJ,EAAME,MACtEmI,EAAavG,KAAK,CAAErB,IAAKA,EAAKW,MAAOA,IAC7BA,EAAME,OAASC,EAAUmB,aAAetB,EAAMhB,QAAUJ,EAAMC,OACtEkI,EAAarG,KAAK,CAAErB,IAAKA,EAAKW,MAAOA,GACvC,IAEIuG,EAAUrH,YAAYN,EAAMC,QAC/B2I,EAAU5I,EAAMC,OACb0H,EAAUrH,YAAYN,EAAME,QAC/B0I,EAAU5I,EAAME,OAEjB8H,EAAaD,GACbG,EAAaD,GACbK,EAAgBD,GAChBD,EAAgBD,EACjB,EAEMY,EAAqB,SAACC,GAC3BlB,EAAc,IACdD,EACCF,EAAUhF,gBAAgBL,QAAO,SAACvB,GAAI,OAAKA,EAAKK,MAAME,OAAS0H,CAAS,IAE1E,EAEMC,EAAqB,SAACxI,GAC3BoH,EAAc,IACdC,EACCH,EAAU7E,cAAcrC,GAE1B,EAEA,OACC,gCACC,cAAC,IAAO,CAACyI,MAAO,KAAMC,OAAQ,IAAI,SACjC,eAAC,IAAM,CAACtJ,KAAM,CAAEuJ,EAAG,EAAGC,EAAG,GAAI,UAC3BlH,EAAWiB,KAAI,SAACrC,GAAI,OACpB,cAAC,IAAO,CACPuI,MAAO,CAAEC,KAAM,SAEf9D,EAAG1E,EAAKN,IAAIgF,EACZC,EAAG3E,EAAKN,IAAIiF,EACZE,EAAG,EACH4D,QAAS,kBAAMX,EAAW9H,EAAK,GAAC,WAJvBA,EAAKN,IAAIS,YAKjB,IAGF0B,EAAWQ,KAAI,SAACrC,GAAI,OACpB,cAAC,IAAO,CACPuI,MAAO,CAAEC,KAAM,QAEf9D,EAAG1E,EAAKN,IAAIgF,EACZC,EAAG3E,EAAKN,IAAIiF,EACZE,EAAG,EACH4D,QAAS,kBAAMX,EAAW9H,EAAK,GAAC,WAJvBA,EAAKN,IAAIS,YAKjB,IAGF6G,EAAU3E,KAAI,SAACrC,GAAI,OACnB,cAAC,IAAO,CACPuI,MAAO,CAAEC,KAAM,SAEf9D,EAAG1E,EAAKN,IAAIgF,EACZC,EAAG3E,EAAKN,IAAIiF,EACZE,EAAG,EACH4D,QAAS,kBAAMP,EAAmBlI,EAAKN,IAAI,EAAC,SAE5C,cAAC,IAAI,CAAC6I,MAAO,CAAEC,KAAM,QAASE,SAAU,GAAI,SAAC,WAAY,aAN9C1I,EAAKN,IAAIS,YAOX,IAGV+G,EAAU7E,KAAI,SAACrC,GAAI,OACnB,cAAC,IAAO,CACPuI,MAAO,CAAEC,KAAM,QAEf9D,EAAG1E,EAAKN,IAAIgF,EACZC,EAAG3E,EAAKN,IAAIiF,EACZE,EAAG,EACH4D,QAAS,kBAAMP,EAAmBlI,EAAKN,IAAI,EAAC,SAE5C,cAAC,IAAI,CAAC6I,MAAO,CAAEC,KAAM,QAASE,SAAU,GAAI,SAAC,WAAY,WANhD1I,EAAKN,IAAIS,YAOT,IAEVmH,EAAajF,KAAI,SAACrC,GAAI,OACtB,cAAC,IAAO,CACPuI,MAAO,CAAEC,KAAM,QAEf9D,EAAG1E,EAAKN,IAAIgF,EACZC,EAAG3E,EAAKN,IAAIiF,EACZE,EAAG,EACH4D,QAAS,kBAAMP,EAAmBlI,EAAKN,IAAI,EAAC,SAE5C,cAAC,IAAI,CAAC6I,MAAO,CAAEC,KAAM,QAASE,SAAU,GAAI,SAAC,UAAW,aAN7C1I,EAAKN,IAAIS,YAOX,IAEViH,EAAa/E,KAAI,SAACrC,GAAI,OACtB,cAAC,IAAO,CACPuI,MAAO,CAAEC,KAAM,SAEf9D,EAAG1E,EAAKN,IAAIgF,EACZC,EAAG3E,EAAKN,IAAIiF,EACZE,EAAG,EACH4D,QAAS,kBAAMP,EAAmBlI,EAAKN,IAAI,EAAC,SAE5C,cAAC,IAAI,CAAC6I,MAAO,CAAEC,KAAM,QAASE,SAAU,GAAI,SAAC,UAAW,aAN7C1I,EAAKN,IAAIS,YAOX,IAEVuH,EACA,cAAC,IAAO,CACPa,MAAO,CAAEC,KAAM,QAEf9D,EAAGgD,EAAWhI,IAAIgF,EAClBC,EAAG+C,EAAWhI,IAAIiF,EAClBE,EAAG,EACH4D,QAAS,kBAAMP,EAAmBR,EAAWhI,IAAI,EAAC,SAElD,cAAC,IAAI,CAAC6I,MAAO,CAAEC,KAAM,OAAQE,SAAU,GAAI,SAAC,aAAc,YANhDhB,EAAWhI,IAAIS,aAS1B,6BAEAqH,EACA,cAAC,IAAO,CACPe,MAAO,CAAEC,KAAM,SAEf9D,EAAG8C,EAAW9H,IAAIgF,EAClBC,EAAG6C,EAAW9H,IAAIiF,EAClBE,EAAG,EACH4D,QAAS,kBAAMP,EAAmBV,EAAW9H,IAAI,EAAC,SAElD,cAAC,IAAI,CAAC6I,MAAO,CAAEC,KAAM,OAAQE,SAAU,GAAI,SAAC,aAAc,YANhDlB,EAAW9H,IAAIS,aAS1B,kCAIH,wBAAQsI,QAAS,kBAAMT,EAAmBxH,EAAUkB,IAAI,EAAE6G,MAAO,CAACI,WAAY,YAAaR,MAAO,QAASC,OAAQ,QAASQ,OAAQ,QAAQ,SAAC,cAG7I,wBAAQH,QAAS,kBAAMT,EAAmBxH,EAAUC,MAAM,EAAE8H,MAAO,CAACI,WAAY,QAASR,MAAO,QAASC,OAAQ,QAASQ,OAAQ,QAAQ,SAAC,gBAG3I,wBAAQH,QAAS,kBAAMT,EAAmBxH,EAAUmB,YAAY,EAAE4G,MAAO,CAACI,WAAY,aAAcR,MAAO,QAASC,OAAQ,QAASQ,OAAQ,QAAQ,SAAC,iBAGrJhB,EAAS,6BAAI,cAAiB,6BAC/B,6BAAKhB,EAAUX,oBAGlB,CCxLe4C,MARf,WACE,OACE,qBAAKC,UAAU,oBAAmB,SAChC,cAACpC,EAAQ,KAGf,ECGoBqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,cAAC,EAAG,IAAKC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,YACf,IACCC,OAAM,SAAAC,GACLtE,QAAQsE,MAAMA,EAAMC,QACtB,G","file":"static/js/main.7a8bfced.chunk.js","sourcesContent":["export default class HiveWorld {\r\n\tconstructor(copyFrom = null) {\r\n\t\tif (copyFrom !== null) {\r\n\t\t\tthis.blackHand = copyFrom.blackHand;\r\n\t\t\tthis.whiteHand = copyFrom.whiteHand;\r\n\t\t\tthis.board = copyFrom.board;\r\n\t\t\tthis.turn = copyFrom.turn;\r\n\t\t\tthis.size = copyFrom.size;\r\n\t\t\tthis.whiteQueenPos = copyFrom.whiteQueenPos;\r\n\t\t\tthis.blackQueenPos = copyFrom.blackQueenPos;\r\n\t\t} else {\r\n\t\t\tthis.blackHand = this.#makeStartingHand(Color.BLACK);\r\n\t\t\tthis.whiteHand = this.#makeStartingHand(Color.WHITE);\r\n\t\t\tthis.board = new Map();\r\n\t\t\tthis.turn = 0;\r\n\t\t\tthis.size = 0;\r\n\t\t\tthis.whiteQueenPos = null;\r\n\t\t\tthis.blackQueenPos = null;\r\n\t\t}\r\n\t}\r\n\r\n\tget currColor() {\r\n\t\treturn this.turn % 2 === 0 ? Color.BLACK : Color.WHITE;\r\n\t}\r\n\r\n\tget opponentColor() {\r\n\t\treturn this.turn % 2 === 0 ? Color.WHITE : Color.BLACK;\r\n\t}\r\n\r\n\toppositeColor(color) {\r\n\t\tif (color === Color.WHITE)\r\n\t\t\treturn Color.BLACK\r\n\t\telse if (color === Color.BLACK)\r\n\t\t\treturn Color.WHITE\r\n\t}\r\n\r\n\r\n\t#makeStartingHand(color) {\r\n\t\treturn new Set([\r\n\t\t\tnew Piece(PieceType.QUEEN, color),\r\n\t\t\tnew Piece(PieceType.GRASSHOPPER, color),\r\n\t\t\tnew Piece(PieceType.GRASSHOPPER, color),\r\n\t\t\tnew Piece(PieceType.GRASSHOPPER, color),\r\n\t\t\tnew Piece(PieceType.ANT, color),\r\n\t\t\tnew Piece(PieceType.ANT, color),\r\n\t\t\tnew Piece(PieceType.ANT, color),\r\n\t\t\tnew Piece(PieceType.ANT, color),\r\n\t\t\tnew Piece(PieceType.ANT, color),\r\n\t\t\tnew Piece(PieceType.ANT, color),\r\n\t\t\tnew Piece(PieceType.ANT, color),\r\n\t\t]);\r\n\t}\r\n\r\n\tisGoalState(color) {\r\n\t\tif (this.blackQueenPos && color === Color.WHITE)\r\n\t\t\treturn this.isPosSurrounded(this.blackQueenPos);\r\n\t\telse if (this.whiteQueenPos && color === Color.BLACK)\r\n\t\t\treturn this.isPosSurrounded(this.whiteQueenPos);\r\n\t\treturn false;\r\n\t}\r\n\r\n\tevaluateState(color) {\r\n\t\tif (this.isGoalState(color)) {\r\n\t\t\treturn 1000;\r\n\t\t}\r\n\t\t\t\r\n\t\tif (this.isGoalState(this.oppositeColor(color))) {\r\n\t\t\treturn -1000;\r\n\t\t}\r\n\t\t\r\n\t\telse {\r\n\t\t\tif (color === Color.BLACK) \r\n\t\t\t\treturn this.countPiecesAround(this.whiteQueenPos) - this.countPiecesAround(this.blackQueenPos);\r\n\t\t\telse if (color === Color.WHITE) \r\n\t\t\t\treturn this.countPiecesAround(this.blackQueenPos) - this.countPiecesAround(this.whiteQueenPos);\r\n\t\t}\r\n\t}\r\n\r\n\tcountPiecesAround(pos) {\r\n\t\tif (pos === null)\r\n\t\t\treturn -1\r\n\t\t\r\n\t\tlet count = 0;\r\n\t\tpos.adjacent.forEach(pos => {\r\n\t\t\tconst piece = this.findPieceAt(pos);\r\n\t\t\tif (piece) {\r\n\t\t\t\tcount += 1;\r\n\t\t\t}\r\n\t\t})\r\n\t\treturn count;\r\n\t}\r\n\r\n\tisPosSurrounded(pos) {\r\n\t\treturn pos.adjacent.every(pos => this.findPieceAt(pos));\r\n\t}\r\n\r\n\tdoMove(move) {\r\n\t\tif (move.prev)\r\n\t\t\tthis.board.delete(move.prev.toString());\r\n\t\telse {\r\n\t\t\tthis.getHand(move.piece.color).delete(move.piece);\r\n\t\t\tthis.size++;\r\n\t\t}\r\n\t\t\t\r\n\t\tthis.board.set(move.pos.toString(), move.piece);\r\n\t\tif (move.piece.type === PieceType.QUEEN)\r\n\t\t\t\tthis.updateQueenPosByMove(move);\r\n\t\t\r\n\t\tthis.turn++;\r\n\t}\r\n\r\n\tundoMove(move) {\r\n\t\t// Remove the piece from its current position\r\n\t\tthis.board.delete(move.pos.toString());\r\n\t  \r\n\t\tif (move.prev) {\r\n\t\t  // Move the piece back to its previous position\r\n\t\t  this.board.set(move.prev.toString(), move.piece);\r\n\t\t} else {\r\n\t\t  // Add the piece back to the hand\r\n\t\t  this.getHand(move.piece.color).add(move.piece);\r\n\t\t  this.size--;\r\n\t\t}\r\n\t  \r\n\t\t// Update the queen position if necessary\r\n\t\tif (move.piece.type === PieceType.QUEEN) {\r\n\t\t  if (move.piece.color === Color.BLACK) {\r\n\t\t\tthis.blackQueenPos = move.prev;\r\n\t\t  } else if (move.piece.color === Color.WHITE) {\r\n\t\t\tthis.whiteQueenPos = move.prev;\r\n\t\t  }\r\n\t\t}\r\n\t  \r\n\t\tthis.turn--;\r\n\t  }\r\n\r\n\tupdateQueenPosByMove(move) {\r\n\t\tif (move.piece.color === Color.BLACK)\r\n\t\t\tthis.blackQueenPos = move.pos;\r\n\t\telse if (move.piece.color === Color.WHITE)\r\n\t\t\tthis.whiteQueenPos = move.pos;\r\n\t}\r\n\r\n\t// returns piece if it exists, otherwise undefined\r\n\tfindPieceAt(pos) {\r\n\t\treturn this.board.get(pos.toString());\r\n\t}\r\n\r\n\tgetPieces(color) {\r\n\t\tlet result = [];\r\n\t\tthis.getAllPiecePositions().forEach((pos) => {\r\n\t\t\tconst piece = this.findPieceAt(pos);\r\n\t\t\tif (piece.color === color) {\r\n\t\t\t\tresult.push(piece);\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn result;\r\n\t}\r\n\r\n\tisEmpty() {\r\n\t\treturn true;\r\n\t}\r\n\r\n\tgetHand(color) {\r\n\t\treturn color === Color.WHITE ? this.whiteHand : this.blackHand;\r\n\t}\r\n\r\n\tgetQueenInHand() {\r\n\t\tfor (const piece of this.getHand(this.currColor)) {\r\n\t\t\tif (piece.type === PieceType.QUEEN) {\r\n\t\t\t\treturn piece;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn undefined;\r\n\t}\r\n\r\n\tgetFirstOfEachPieceInHand() {\r\n\t\tlet result = [];\r\n\t\tlet includedType = new Set();\r\n\t\tthis.getHand(this.currColor).forEach((piece) => {\r\n\t\t\tif (!includedType.has(piece.type)) {\r\n\t\t\t\tincludedType.add(piece.type);\r\n\t\t\t\tresult.push(piece);\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn result;\r\n\t}\r\n\r\n\t#getFirstTurnPlaceMoves() {\r\n\t\treturn [...this.getFirstOfEachPieceInHand()].map(\r\n\t\t\t(piece) => new Move(piece, ORIGIN)\r\n\t\t);\r\n\t}\r\n\r\n\t#getSecondTurnPlaceMoves() {\r\n\t\tconst placeMoves = this.#getPlaceMovesFromPositionsForEachPieceInHand(\r\n\t\t\tORIGIN.adjacent\r\n\t\t);\r\n\t\treturn placeMoves;\r\n\t}\r\n\r\n\t#getAfterSecondTurnPlaceMoves() {\r\n\t\tconst adjPositions = this.#getAllAdjacentPositions();\r\n\t\tconst nonAdjToOpponent =\r\n\t\t\tthis.#filterOutPosAdjToOpponentPieces(adjPositions);\r\n\t\tconst placeMoves =\r\n\t\t\tthis.#getPlaceMovesFromPositionsForEachPieceInHand(nonAdjToOpponent);\r\n\t\treturn placeMoves;\r\n\t}\r\n\r\n\t#getAllAdjacentPositions() {\r\n\t\tlet positions = [];\r\n\t\tfor (const pos of this.getAllPiecePositions()) {\r\n\t\t\tfor (const potentialPos of pos.adjacent) {\r\n\t\t\t\tif (this.findPieceAt(potentialPos) === undefined) {\r\n\t\t\t\t\tpositions.push(potentialPos);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn positions;\r\n\t}\r\n\r\n\t#filterOutPosAdjToOpponentPieces(pos) {\r\n\t\tconst filtered = pos.filter((pos) => {\r\n\t\t\tfor (const adj of pos.adjacent) {\r\n\t\t\t\tconst adjPiece = this.findPieceAt(adj);\r\n\t\t\t\tif (adjPiece !== undefined && adjPiece.color !== this.currColor) {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t});\r\n\t\treturn filtered;\r\n\t}\r\n\r\n\t#getPlaceMovesFromPositionsForEachPieceInHand(positions) {\r\n\t\tlet moves = [];\r\n\t\tthis.getFirstOfEachPieceInHand().forEach((piece) => {\r\n\t\t\tfor (const pos of positions) {\r\n\t\t\t\tmoves.push(new Move(piece, pos));\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn moves;\r\n\t}\r\n\t\r\n\r\n\tgetPlaceMoves() {\r\n\t\tif (this.turn === 0) return this.#getFirstTurnPlaceMoves();\r\n\t\telse if (this.turn === 1) return this.#getSecondTurnPlaceMoves();\r\n\r\n\t\tconst placeMoves = this.#getAfterSecondTurnPlaceMoves();\r\n\t\tif (this.turn >= 6) {\r\n\t\t\tconst queen = this.getQueenInHand();\r\n\t\t\tif (queen !== undefined) {\r\n\t\t\t\treturn placeMoves.filter((move) => move.piece.type === PieceType.QUEEN);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn placeMoves;\r\n\t}\r\n\r\n\tgetPieceMoves(pos) {\r\n\t\tconst piece = this.findPieceAt(pos);\r\n\r\n\t\tif (piece.color !== this.currColor) return [];\r\n\r\n\t\t// cant move a piece if queen hasn't been placed yet after turn 6\r\n\t\tif (this.turn >= 6) {\r\n\t\t\tconst queen = this.getQueenInHand();\r\n\t\t\tif (queen !== undefined) {\r\n\t\t\t\treturn [];\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// dissallow moves that disconnect the hive\r\n\t\tfor (const adj of pos.adjacent) {\r\n\t\t\tconst adjPiece = this.findPieceAt(adj);\r\n\t\t\tif (adjPiece === undefined && !this.#isBoardConnectedAfterMove(new Move(piece, adj, pos))) {\r\n\t\t\t\treturn [];\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (piece.type === PieceType.QUEEN)\r\n\t\t\treturn this.#getQueenMoves(pos);\r\n\t\telse if (piece.type === PieceType.ANT)\r\n\t\t\treturn this.#getAntMoves(pos);\r\n\t\telse if (piece.type === PieceType.GRASSHOPPER)\r\n\t\t\treturn this.#getGrasshopperMoves(pos);\r\n\t}\r\n\r\n\t#getQueenMoves(pos) {\r\n\t\treturn pos.adjacent.filter(adj => \r\n\t\t\t(this.isPosFreeAndAdjToAnyPieceExcluding(adj, pos) &&\r\n\t\t\tthis.#canSlideBetween(pos, adj)))\r\n\t\t\t\t.map(adj => new Move(this.findPieceAt(pos), adj, pos));\r\n\t}\r\n\r\n\t#getGrasshopperMoves(pos) {\r\n\t\tlet moves = []\r\n\t\tif (this.findPieceAt(pos.top))\r\n\t\t\tmoves.push(this.#getMoveOppositeOfDir(pos, (pos) => pos.top));\r\n\t\tif (this.findPieceAt(pos.topRight))\r\n\t\t\tmoves.push(this.#getMoveOppositeOfDir(pos, (pos) => pos.topRight));\r\n\t\tif (this.findPieceAt(pos.botRight))\r\n\t\t\tmoves.push(this.#getMoveOppositeOfDir(pos, (pos) => pos.botRight));\r\n\t\tif (this.findPieceAt(pos.bot))\r\n\t\t\tmoves.push(this.#getMoveOppositeOfDir(pos, (pos) => pos.bot));\r\n\t\tif (this.findPieceAt(pos.botLeft))\r\n\t\t\tmoves.push(this.#getMoveOppositeOfDir(pos, (pos) => pos.botLeft));\r\n\t\tif (this.findPieceAt(pos.topLeft))\r\n\t\t\tmoves.push(this.#getMoveOppositeOfDir(pos, (pos) => pos.topLeft));\r\n\t\treturn moves\r\n\t}\r\n\r\n\t#getMoveOppositeOfDir(pos, dirFunc) {\r\n\t\tlet current = dirFunc(pos);\r\n\t\twhile (this.findPieceAt(current)) {\r\n\t\t\tcurrent = dirFunc(current);\r\n\t\t}\r\n\t\treturn new Move(this.findPieceAt(pos), current, pos);\r\n\t}\r\n\r\n\t#getAntMoves(pos) {\r\n\t\tconst moves = [];\r\n\t\tconst frontier = [pos];\r\n\t\tconst enteredFrontier = new Set();\r\n\t\tenteredFrontier.add(pos.toString())\r\n\r\n\t\twhile (frontier.length > 0) {\r\n\t\t\tconst current = frontier.pop();\r\n\t\t\tconst potentialMove = new Move(this.findPieceAt(pos), current, pos)\r\n\t\t\t\r\n\t\t\tif (!current.equals(pos))\r\n\t\t\t\tmoves.push(potentialMove);\r\n\r\n\t\t\tfor (const adj of current.adjacent) {\r\n\t\t\t\tif (\r\n\t\t\t\t\tthis.isPosFreeAndAdjToAnyPieceExcluding(adj, pos) &&\r\n\t\t\t\t\t!enteredFrontier.has(adj.toString()) &&\r\n\t\t\t\t\tthis.#canSlideBetween(current, adj)\r\n\t\t\t\t) {\r\n\t\t\t\t\tfrontier.push(adj);\r\n\t\t\t\t\tenteredFrontier.add(adj.toString());\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn moves;\r\n\t}\r\n\r\n\tgetAllPossibleMoves() {\r\n\t\tconst placeMoves = this.getPlaceMoves();\r\n\t\tconst piecePositions = this.getAllPiecePositions().filter(\r\n\t\t(pos) => this.findPieceAt(pos).color === this.currColor\r\n\t\t);\r\n\r\n\t\tconst pieceMoves = piecePositions.flatMap((pos) => this.getPieceMoves(pos));\r\n\r\n\t\tconst allMoves = [...placeMoves, ...pieceMoves];\r\n\t\treturn allMoves;\r\n\t}\r\n\r\n\t\r\n\r\n\t#canSlideBetween(from, to) {\r\n\t\tconst fromAdjBlocked = from.adjacent.filter(pos => this.findPieceAt(pos));\r\n\t\tconst toAdjBlocked = to.adjacent.filter(pos => this.findPieceAt(pos));\r\n\t\tconst commonNeighbors = fromAdjBlocked.filter(fromPos => toAdjBlocked.some(toPos => fromPos.equals(toPos)));\r\n\t\r\n\t\tif (commonNeighbors.length >= 2) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\t#isBoardConnectedAfterMove(move) {\r\n\t\t//temporarily remove piece\r\n\t\tthis.board.delete(move.prev.toString());\r\n\r\n\t\tconst positions = this.getAllPiecePositions();\r\n\t\tlet frontier = [positions[0]];\r\n\t\tlet enteredFrontier = new Set();\r\n\t\tenteredFrontier.add(positions[0].toString());\r\n\r\n\t\tlet connectedCount = 0;\r\n\t\twhile (frontier.length > 0) {\r\n\t\t\tconst current = frontier.pop();\r\n\t\t\tconnectedCount += 1;\r\n\t\t\t\r\n\t\t\tfor (const adj of current.adjacent) {\r\n\t\t\t\tif (this.findPieceAt(adj) && !enteredFrontier.has(adj.toString())) {\r\n\t\t\t\t\tfrontier.push(adj);\r\n\t\t\t\t\tenteredFrontier.add(adj.toString());\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.board.set(move.prev.toString(), move.piece);\r\n\r\n\t\treturn connectedCount === this.size - 1;\r\n\t}\r\n\r\n\tisPosFreeAndAdjToAnyPieceExcluding(pos, excluding) {\r\n\t\tif (this.findPieceAt(pos)) return false;\r\n\r\n\t\tfor (const adj of pos.adjacent) {\r\n\t\t\tif (this.findPieceAt(adj) && !adj.equals(excluding)) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n    \t}\r\n\r\n    \treturn false;\r\n\t}\r\n\r\n\tgetAllPiecePositions() {\r\n\t\t//convert each to HexPos.\r\n\t\treturn Array.from(this.board.keys()).map(HexPos.fromString);\r\n\t}\r\n\r\n\t// testing utilities\r\n\r\n\tfindPlaceMoveAt(pos) {\r\n\t\treturn this.getPlaceMoves().find((move) => move.pos.equals(pos));\r\n\t}\r\n\r\n\tfindAntPlaceMoveAt(pos) {\r\n\t\treturn this.getPlaceMoves().filter(move => move.piece.type === PieceType.ANT).find((move) => move.pos.equals(pos));\r\n\t}\r\n}\r\n\r\nexport class Piece {\r\n\tconstructor(type, color) {\r\n\t\tthis.type = type;\r\n\t\tthis.color = color;\r\n\t}\r\n}\r\n\r\nexport class Move {\r\n\tconstructor(piece, pos, prev=null) {\r\n\t\tthis.piece = piece;\r\n\t\tthis.pos = pos;\r\n\t\tthis.prev = prev;\r\n\t}\r\n\r\n\tequals(otherMove) {\r\n\t\treturn (\r\n\t\t\tObject.is(this.piece, otherMove.piece) && this.pos.equals(otherMove.pos)\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport class HexPos {\r\n\tconstructor(q, r) {\r\n\t\tthis.q = q;\r\n\t\tthis.r = r;\r\n\t}\r\n\r\n\tstatic fromString(s) {\r\n\t\tconst [q, r] = s.split(',').map(Number);\r\n\t\treturn new HexPos(q, r);\r\n\t}\r\n\r\n\ttoString() {\r\n\t\treturn `${this.q},${this.r}`;\r\n\t}\r\n\r\n\tequals(other) {\r\n\t\treturn this.q === other.q && this.r === other.r;\r\n\t}\r\n\r\n\tget adjacent() {\r\n\t\treturn [\r\n\t\t\tthis.topLeft,\r\n\t\t\tthis.topRight,\r\n\t\t\tthis.top,\r\n\t\t\tthis.bot,\r\n\t\t\tthis.botLeft,\r\n\t\t\tthis.botRight,\r\n\t\t];\r\n\t}\r\n\r\n\tget top() {\r\n\t\treturn new HexPos(this.q, this.r - 1);\r\n\t}\r\n\r\n\tget bot() {\r\n\t\treturn new HexPos(this.q, this.r + 1);\r\n\t}\r\n\r\n\tget topLeft() {\r\n\t\treturn new HexPos(this.q - 1, this.r);\r\n\t}\r\n\r\n\tget botRight() {\r\n\t\treturn new HexPos(this.q + 1, this.r);\r\n\t}\r\n\r\n\tget topRight() {\r\n\t\treturn new HexPos(this.q + 1, this.r - 1);\r\n\t}\r\n\r\n\tget botLeft() {\r\n\t\treturn new HexPos(this.q - 1, this.r + 1);\r\n\t}\r\n}\r\n\r\nexport const ORIGIN = new HexPos(0, 0, 0);\r\n\r\nexport const Color = {\r\n\tBLACK: 'black',\r\n\tWHITE: 'white',\r\n};\r\n\r\nexport const PieceType = {\r\n\tQUEEN: 'queen',\r\n\tSPIDER: 'spider',\r\n\tBEETLE: 'beetle',\r\n\tGRASSHOPPER: 'grasshopper',\r\n\tANT: 'ant',\r\n};\r\n","import HiveWorld, { Color } from './HiveWorld';\n\nexport class MinMaxHiveAI {\n    constructor(hw) {\n        this.hw = hw;\n    }\n\n    playMove() {\n        const depth = 3; \n        const bestMoveData = this.minimaxAlphaBeta(depth, Number.NEGATIVE_INFINITY, Number.POSITIVE_INFINITY, Color.WHITE);\n        const bestMove = bestMoveData.move;\n        console.log(bestMoveData.value);\n        this.hw.doMove(bestMove);\n    }\n\n    minimaxAlphaBeta(depth, alpha, beta, maximizingPlayer) {\n        const hw = this.hw;\n\t\tif (depth === 0 || hw.isGoalState(Color.BLACK) || hw.isGoalState(Color.WHITE)) {\n\t\t  return { move: null, value: hw.evaluateState(Color.WHITE) };\n\t\t}\n\t  \n\t\tlet bestMove = null;\n\t  \n\n\t\tif (maximizingPlayer === Color.WHITE) {\n\t\t  let maxEval = Number.NEGATIVE_INFINITY;\n\t\t  const moves = hw.getAllPossibleMoves();\n\t\t  for (const move of moves) {\n\t\t\thw.doMove(move);\n\t\t\tconst evalData = this.minimaxAlphaBeta(depth - 1, alpha, beta, Color.BLACK);\n\t\t\thw.undoMove(move);\n\t  \n\t\t\tif (evalData.value > maxEval) {\n\t\t\t  maxEval = evalData.value;\n\t\t\t  bestMove = move;\n\t\t\t}\n\t  \n\t\t\talpha = Math.max(alpha, evalData.value);\n\t\t\tif (beta <= alpha) {\n\t\t\t  break;\n\t\t\t}\n\t\t  }\n          //console.log(maxEval);\n\t\t  return { move: bestMove, value: maxEval };\n\t\t} else if (maximizingPlayer === Color.BLACK) {\n\t\t  let minEval = Number.POSITIVE_INFINITY;\n\t\t  const moves = hw.getAllPossibleMoves();\n\t\t  for (const move of moves) {\n\t\t\thw.doMove(move);\n\t\t\tconst evalData = this.minimaxAlphaBeta(depth - 1, alpha, beta, Color.WHITE);\n\t\t\thw.undoMove(move);\n\t  \n\t\t\tif (evalData.value < minEval) {\n\t\t\t  minEval = evalData.value;\n\t\t\t  bestMove = move;\n\t\t\t}\n\t  \n\t\t\tbeta = Math.min(beta, evalData.value);\n\t\t\tif (beta <= alpha) {\n\t\t\t  break;\n\t\t\t}\n\t\t  }\n          \n\t\t  return { move: bestMove, value: minEval };\n\t\t}\n\t}\n}","import React, { useState } from 'react';\nimport { HexGrid, Layout, Hexagon, Text } from 'react-hexgrid';\nimport HiveWorld, {\n\tHexPos,\n\tMove,\n\tPieceType,\n\tColor,\n} from '../Model/HiveWorld.js';\nimport { RandomHiveAI } from '../Model/RandomAI.js';\nimport { MinMaxHiveAI } from '../Model/MinMaxAI.js';\n\nexport default function HiveGame() {\n\tconst [hiveWorld, setHiveWorld] = useState(new HiveWorld());\n\tconst [placeMoves, setPlaceMoves] = useState([]);\n\tconst [pieceMoves, setPieceMoves] = useState([]);\n\tconst [blackAnts, setBlackAnts] = useState([]);\n\tconst [whiteAnts, setWhiteAnts] = useState([]);\n\tconst [blackHoppers, setBlackHoppers] = useState([]);\n\tconst [whiteHoppers, setWhiteHoppers] = useState([]);\n\tconst [blackQueen, setBlackQueen] = useState();\n\tconst [whiteQueen, setWhiteQueen] = useState();\n\tconst [winner, setWinner] = useState(null);\n\n\tconst handleMove = (move) => {\n\t\t// Update hiveWorld with the new move\n\t\thiveWorld.doMove(move);\n\t\tconst ai = new MinMaxHiveAI(hiveWorld);\n\t\tai.playMove();\n\t\tsetHiveWorld(new HiveWorld(hiveWorld));\n\t\tsetPlaceMoves([]);\n\t\tsetPieceMoves([]);\n\n\t\tlet blackAnts = [];\n\t\tlet whiteAnts = [];\n\t\tlet whiteHoppers = [];\n\t\tlet blackHoppers = [];\n\t\thiveWorld.board.forEach((piece, pos) => {\n\t\t\tpos = HexPos.fromString(pos);\n\t\t\tif (piece.type === PieceType.ANT && piece.color === Color.BLACK)\n\t\t\t\tblackAnts.push({ pos: pos, piece: piece });\n\t\t\telse if (piece.type === PieceType.ANT && piece.color === Color.WHITE)\n\t\t\t\twhiteAnts.push({ pos: pos, piece: piece });\n\t\t\telse if (piece.type === PieceType.QUEEN && piece.color === Color.WHITE)\n\t\t\t\tsetWhiteQueen({ pos: pos, piece: piece });\n\t\t\telse if (piece.type === PieceType.QUEEN && piece.color === Color.BLACK)\n\t\t\t\tsetBlackQueen({ pos: pos, piece: piece });\n\t\t\telse if (piece.type === PieceType.GRASSHOPPER && piece.color === Color.WHITE)\n\t\t\t\twhiteHoppers.push({ pos: pos, piece: piece });\n\t\t\telse if (piece.type === PieceType.GRASSHOPPER && piece.color === Color.BLACK)\n\t\t\t\tblackHoppers.push({ pos: pos, piece: piece });\n\t\t});\n\n\t\tif (hiveWorld.isGoalState(Color.BLACK))\n\t\t\tsetWinner(Color.BLACK);\n\t\tif (hiveWorld.isGoalState(Color.WHITE))\n\t\t\tsetWinner(Color.WHITE);\n\n\t\tsetBlackAnts(blackAnts);\n\t\tsetWhiteAnts(whiteAnts);\n\t\tsetWhiteHoppers(whiteHoppers);\n\t\tsetBlackHoppers(blackHoppers);\n\t};\n\n\tconst getValidPlaceMoves = (pieceType) => {\n\t\tsetPieceMoves([]);\n\t\tsetPlaceMoves(\n\t\t\thiveWorld.getPlaceMoves().filter((move) => move.piece.type === pieceType)\n\t\t);\n\t};\n\n\tconst getValidPieceMoves = (pos) => {\n\t\tsetPlaceMoves([]);\n\t\tsetPieceMoves(\n\t\t\thiveWorld.getPieceMoves(pos)\n\t\t);\n\t};\n\n\treturn (\n\t\t<div>\n\t\t\t<HexGrid width={1200} height={800}>\n\t\t\t\t<Layout size={{ x: 5, y: 5 }}>\n\t\t\t\t\t{placeMoves.map((move) => (\n\t\t\t\t\t\t<Hexagon\n\t\t\t\t\t\t\tstyle={{ fill: 'green' }}\n\t\t\t\t\t\t\tkey={`g${move.pos.toString()}`}\n\t\t\t\t\t\t\tq={move.pos.q}\n\t\t\t\t\t\t\tr={move.pos.r}\n\t\t\t\t\t\t\ts={0}\n\t\t\t\t\t\t\tonClick={() => handleMove(move)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t))}\n\n\t\t\t\t\t{pieceMoves.map((move) => (\n\t\t\t\t\t\t<Hexagon\n\t\t\t\t\t\t\tstyle={{ fill: 'blue' }}\n\t\t\t\t\t\t\tkey={`b${move.pos.toString()}`}\n\t\t\t\t\t\t\tq={move.pos.q}\n\t\t\t\t\t\t\tr={move.pos.r}\n\t\t\t\t\t\t\ts={0}\n\t\t\t\t\t\t\tonClick={() => handleMove(move)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t))}\n\n\t\t\t\t\t{blackAnts.map((move) => (\n\t\t\t\t\t\t<Hexagon\n\t\t\t\t\t\t\tstyle={{ fill: 'black' }}\n\t\t\t\t\t\t\tkey={`blk${move.pos.toString()}`}\n\t\t\t\t\t\t\tq={move.pos.q}\n\t\t\t\t\t\t\tr={move.pos.r}\n\t\t\t\t\t\t\ts={0}\n\t\t\t\t\t\t\tonClick={() => getValidPieceMoves(move.pos)}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<Text style={{ fill: 'white', fontSize: 5 }}> Ant </Text>\n\t\t\t\t\t\t</Hexagon>\n\t\t\t\t\t))}\n\n\t\t\t\t\t{whiteAnts.map((move) => (\n\t\t\t\t\t\t<Hexagon\n\t\t\t\t\t\t\tstyle={{ fill: 'grey' }}\n\t\t\t\t\t\t\tkey={`w${move.pos.toString()}`}\n\t\t\t\t\t\t\tq={move.pos.q}\n\t\t\t\t\t\t\tr={move.pos.r}\n\t\t\t\t\t\t\ts={0}\n\t\t\t\t\t\t\tonClick={() => getValidPieceMoves(move.pos)}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<Text style={{ fill: 'white', fontSize: 5 }}> Ant </Text>\n\t\t\t\t\t\t</Hexagon>\n\t\t\t\t\t))}\n\t\t\t\t\t{whiteHoppers.map((move) => (\n\t\t\t\t\t\t<Hexagon\n\t\t\t\t\t\t\tstyle={{ fill: 'grey' }}\n\t\t\t\t\t\t\tkey={`bgh${move.pos.toString()}`}\n\t\t\t\t\t\t\tq={move.pos.q}\n\t\t\t\t\t\t\tr={move.pos.r}\n\t\t\t\t\t\t\ts={0}\n\t\t\t\t\t\t\tonClick={() => getValidPieceMoves(move.pos)}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<Text style={{ fill: 'green', fontSize: 5 }}> GH </Text>\n\t\t\t\t\t\t</Hexagon>\n\t\t\t\t\t))}\n\t\t\t\t\t{blackHoppers.map((move) => (\n\t\t\t\t\t\t<Hexagon\n\t\t\t\t\t\t\tstyle={{ fill: 'black' }}\n\t\t\t\t\t\t\tkey={`wgh${move.pos.toString()}`}\n\t\t\t\t\t\t\tq={move.pos.q}\n\t\t\t\t\t\t\tr={move.pos.r}\n\t\t\t\t\t\t\ts={0}\n\t\t\t\t\t\t\tonClick={() => getValidPieceMoves(move.pos)}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<Text style={{ fill: 'green', fontSize: 5 }}> GH </Text>\n\t\t\t\t\t\t</Hexagon>\n\t\t\t\t\t))}\n\t\t\t\t\t{whiteQueen ? (\n\t\t\t\t\t\t<Hexagon\n\t\t\t\t\t\t\tstyle={{ fill: 'grey' }}\n\t\t\t\t\t\t\tkey={`wq${whiteQueen.pos.toString()}`}\n\t\t\t\t\t\t\tq={whiteQueen.pos.q}\n\t\t\t\t\t\t\tr={whiteQueen.pos.r}\n\t\t\t\t\t\t\ts={0}\n\t\t\t\t\t\t\tonClick={() => getValidPieceMoves(whiteQueen.pos)}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<Text style={{ fill: 'gold', fontSize: 3 }}> Queen </Text>\n\t\t\t\t\t\t</Hexagon>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<></>\n\t\t\t\t\t)}\n\t\t\t\t\t{blackQueen ? (\n\t\t\t\t\t\t<Hexagon\n\t\t\t\t\t\t\tstyle={{ fill: 'black' }}\n\t\t\t\t\t\t\tkey={`bq${blackQueen.pos.toString()}`}\n\t\t\t\t\t\t\tq={blackQueen.pos.q}\n\t\t\t\t\t\t\tr={blackQueen.pos.r}\n\t\t\t\t\t\t\ts={0}\n\t\t\t\t\t\t\tonClick={() => getValidPieceMoves(blackQueen.pos)}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<Text style={{ fill: 'gold', fontSize: 3 }}> Queen </Text>\n\t\t\t\t\t\t</Hexagon>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<></>\n\t\t\t\t\t)}\n\t\t\t\t</Layout>\n\t\t\t</HexGrid>\n\t\t\t<button onClick={() => getValidPlaceMoves(PieceType.ANT)} style={{background: \"lightgray\", width: \"100px\", height: \"100px\", margin: \"10px\"}}>\n\t\t\t\tPlace Ant\n\t\t\t</button>\n\t\t\t<button onClick={() => getValidPlaceMoves(PieceType.QUEEN)} style={{background: \"wheat\", width: \"100px\", height: \"100px\", margin: \"10px\"}}>\n\t\t\t\tPlace Queen\n\t\t\t</button>\n\t\t\t<button onClick={() => getValidPlaceMoves(PieceType.GRASSHOPPER)} style={{background: \"lightgreen\", width: \"100px\", height: \"100px\", margin: \"10px\"}}>\n\t\t\t\tPlace Hopper\n\t\t\t</button>\n\t\t\t{winner ? <h1>GAME OVER</h1> : <></>}\n\t\t\t<h1>{hiveWorld.evaluateState()}</h1>\n\t\t</div>\n\t);\n}\n","import React from \"react\";\r\nimport HiveGame from \"./Components/HiveGame\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"w-screen h-screen\">\r\n      <HiveGame/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { \"Service-Worker\": \"script\" }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nimport \"./styles/index.css\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}